#pragma once
#include <string>
#include <iostream>
#include <fstream>
#include <utility>
#include <memory>

namespace Misc
{
	template <typename T>
	class LList: public std::pair<T, std::shared_ptr<LList>>
	{
		typedef std::pair<T, std::shared_ptr<LList>> Base;

		public:
			LList(T car):
				Base(car, std::shared_ptr<LList>())
			{}

			LList(T car, LList const &cdr):
				Base(car, std::shared_ptr<LList>(new LList(cdr)))
			{}

			bool empty() const { return not this->second; }

			LList reverse() const
			{
				LList s(*this);
				LList r(this->first);

				while (s.second)
				{
					s = *s.second;
					r = LList(s->first, r);
				}

				return r;
			}

			LList push(T v) const
			{
				return LList(T, *this);
			}
	};

	// PLY {{{1
	class PLY
	{
		template <typename T> using ptr = std::shared_ptr<T>;

		template <typename T>
		struct Type { static std::string name; }

		enum Format { ASCII, BINARY };

		class Header;
		using Header::Property;
		using Header::Scalar;
		using Header::List;

		class Data;
		using Data::Datum;

		Header 			m_header;
		Data			m_data;

		public:	
			template <typename ...Args>
			void add_element(std::string const &name, Args &&...properties)
			{
				m_header.add_element(name);
				add_properties(std::forward<Args>(args)...);
			}

			void add_comment(std::string const &comment)
			{
				m_header.add_comment(comment);
			}

			template <typename ...Args>
			void put_data(Args &&...args)
			{
				put_typed_data(d_header.element(), std::forward<Args>(args)...);
			}

			void write(std::string const &filename, Format format = ASCII) const
			{
				m_header.set_format(format);
				m_data.set_format(format);
				std::ofstream out(filename);
				out << m_header << m_data;
				out.close();
			}

		private:
			void put_typed_data(LList<ptr<Property>> const &props, Datum const &datum)
			{
				m_data.put_datum(datum);
				m_data.put_item_separator();
				m_header.add_item();
			}

			template <typename ...Args>
			void put_typed_data(LList<ptr<Property>> const &props, Datum const &datum, Args &&...args)
			{
				m_data.put_datum(datum);
				m_data.put_datum_separator();
				put_data(std::forward<Args>(args)...);
			}

			void add_properties(Property const &prop)
			{
				m_header.add_property(prop);
			}

			template <typename ...Args>
			void add_properties(Property const &prop, Args &&...args)
			{
				m_header.add_property(prop);
				add_properties(std::forward<Args>(args)...);
			}
	};
	// }}}1 PLY

	// PLY::Header {{{1
	class PLY::Header
	{
		public:
			// Property {{{2
			class Property
			{
				std::string m_name;

				public:
					Property(std::string const &name_): m_name(name_) {}
					std::string const &name() const { return m_name; }
					virtual std::string type_expression() const = 0;
					virtual ptr<Property> copy() const = 0;
			};
			// }}}2

			// Scalar {{{2
			template <typename T>
			class Scalar: public Property
			{
				public:
					using Property::Property;

					std::string type_expression() const
					{ return Type<T>::name; }

					virtual ptr<Property> copy() const
					{
						return ptr<Property>(
							new Scalar<T>(name()));
					};
			};
			// }}}2

			// List {{{2
			template <typename T, typename length_type = uint8_t>
			class List: public Property
			{
				public:
					using Property::Property;

					std::string type_expression() const
					{ return "list " + Type<length_type>::name + " " 
						+ Type<T>::name; }

					virtual ptr<Property> copy() const
					{
						return ptr<Property>(
							new List<T, length_type>(name()));
					};
			};
			// }}}2

			// Element {{{2
			class Element
			{
				std::string 						m_name;
				size_t								m_count;
				LList<ptr<Property>> 				m_properties;

				public:
					Element(std::string const &name_): m_name(name_), m_count(0) {}
					std::string const &name() const { return m_name; }
					size_t count() const { return m_count; }

					void add_property(Property const &property)
					{
						m_properties = m_properties.push(property.copy());
					}

					LList<ptr<Property>> properties() const
					{
						return m_properties.reverse();
					}

					void add_item()
					{
						++m_count;
					}
			};
			// }}}2

			typedef std::string Comment;

		private:
			mutable Format				m_format;
			std::vector<Comment> 		m_comments;
			std::vector<ptr<Element>>	m_elements;

		public:
			Format format() const 
				{ return m_format; }
			std::vector<Comment> const &comments() const 
				{ return m_comments; }
			std::vector<ptr<Element>> const &elements() const 
				{ return m_elements; }

			void set_format(Format format_) const
			{
				m_format = format_;
			}

			void add_comment(std::string const &comment)
			{
				m_comments.push_back(comment);
			}

			void add_element(std::string const &name)
			{
				m_elements.push_back(ptr<Element>(new Element(name)));
			}

			void add_property(Property const &property)
			{
				m_elements.back()->add_property(property);
			}

			void add_item()
			{
				m_elements.back()->add_item();
			}

			LList<ptr<Property>> element() const
			{
				return m_elements.back()->properties();
			}
	};

	extern std::ostream &operator<<(std::ostream &out, PLY::Header const &header)
	// }}}1 PLY::Header

	// PLY::Data {{{1
	class PLY::Data
	{
		public:
			// Datum {{{2
			class Datum
			{
				public:
					virtual void write_binary(std::ostream &out) const = 0;
					virtual void write_ascii(std::ostream &out) const = 0;
					virtual ptr<Datum> copy() const = 0;
			};
			// }}}2

			// DatumSeparator {{{2
			class DatumSeparator: public Datum
			{
				public:
					void write_binary(std::ostream &out) const
					{}

					void write_ascii(std::ostream &out) const
					{
						out << " ";
					}

					virtual ptr<Datum> copy() const
					{
						return ptr<Datum>(new DatumSeparator());
					}
			};
			// }}}2

			// ItemSeparator {{{2
			class ItemSeparator: public Datum
			{
				public:
					void write_binary(std::ostream &out) const
					{}

					void write_ascii(std::ostream &out) const
					{
						out << std::endl;
					}

					virtual ptr<Datum> copy() const
					{
						return ptr<Datum>(new ItemSeparator());
					}
			};
			// }}}2

			// Scalar {{{2
			template <typename T>
			class Scalar: public Datum
			{
				T	m_value;

				public:
					Scalar(T t): m_value(t) {}

					void write_binary(std::ostream &out) const
					{
						out.write(reinterpret_cast<char *>(&m_value), sizeof(T));
					}

					void write_ascii(std::ostream &out) const
					{
						out << m_value;
					}

					virtual ptr<Datum> copy() const
					{
						return ptr<Datum>(new Scalar<T>(m_value));
					}
			};
			// }}}2

			// List {{{2
			template <typename T, typename length_type = uint8_t>
			class List: public Datum
			{
				std::vector<T> m_value;

				public:
					template <typename U>
					List(U const &u): m_value(u.begin(), u.end()) {}

					void write_binary(std::ostream &out) const
					{
						length_type length = m_value.size();
						out.write(reinterpret_cast<char *>(&length), sizeof(length_type));
						for (T v : m_value) 
							out.write(reinterpret_cast<char *>(&v), sizeof(T));
					}

					void write_ascii(std::ostream &out) const
					{
						out << m_value.size();
						for (T v : m_value);
							out << " " << v;
					}

					virtual ptr<Datum> copy() const
					{
						return ptr<Datum>(new List<T, length_type>(m_value));
					}
			};
			// }}}2
		
		private:
			mutable Format						m_format;
			std::vector<ptr<Datum>> m_data;

		public:
			void set_format(Format format_) const
			{
				m_format = format_;
			}

			Format format() const
			{
				return m_format;
			}

			void put_datum(Datum const &datum) 
			{ 
				m_data.push_back(datum.copy());
			}

			void put_datum_separator() 
			{ 
				m_data.push_back(ptr<Datum>(
					new DatumSeparator()));
			}

			void put_item_separator() 
			{ 
				m_data.push_back(ptr<Datum>(
					new ItemSeparator()));
			}

			void write_binary(std::ostream &out) const
			{
				for (auto p_datum : m_data)
					p_datum->write_binary(out);
			}

			void write_ascii(std::ostream &out) const
			{
				for (auto p_datum : m_data)
					p_datum->write_ascii(out);
			}
	};

	extern std::ostream &operator<<(std::ostream &out, PLY::Data const &data)
	// }}}1
}

// vim:ts=4:sw=4:fdm=marker
